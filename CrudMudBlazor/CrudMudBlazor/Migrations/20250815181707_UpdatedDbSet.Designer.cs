// <auto-generated />
using System;
using CrudMudBlazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrudMudBlazor.Migrations
{
    [DbContext(typeof(PartyDbContext))]
    [Migration("20250815181707_UpdatedDbSet")]
    partial class UpdatedDbSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CrudMudBlazor.Models.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PartyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PartyTypeId")
                        .HasColumnType("integer");

                    b.HasKey("PartyId");

                    b.HasIndex("PartyTypeId");

                    b.ToTable("Parties");

                    b.HasDiscriminator().HasValue("Party");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CrudMudBlazor.Models.PartyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PartyTypes");
                });

            modelBuilder.Entity("CrudMudBlazor.Models.Organization", b =>
                {
                    b.HasBaseType("CrudMudBlazor.Models.Party");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("CrudMudBlazor.Models.Person", b =>
                {
                    b.HasBaseType("CrudMudBlazor.Models.Party");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("CrudMudBlazor.Models.Party", b =>
                {
                    b.HasOne("CrudMudBlazor.Models.PartyType", "PartyType")
                        .WithMany()
                        .HasForeignKey("PartyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyType");
                });
#pragma warning restore 612, 618
        }
    }
}
